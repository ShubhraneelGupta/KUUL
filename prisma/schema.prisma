// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  phone     String
  tickets   Ticket[]
  images    Image[]

  @@map("users")
}

model Artist {
  id               Int     @id @default(autoincrement())
  name             String
  bio              String?
  genre            String?
  socialMediaLinks Json?
  upcomingEvents   Json? // Array of event IDs
  images           Image[]

  @@map("artists")
}

model Venue {
  id          Int     @id @default(autoincrement())
  name        String
  address     String
  city        String
  country     String
  description String?
  contactInfo String?
  events      Event[]
  images      Image[]

  @@map("venues")
}

model Event {
  id               Int      @id @default(autoincrement())
  venueId          Int
  name             String
  startTime        DateTime
  endTime          DateTime
  description      String?
  basePrice        Decimal  @db.Decimal(10, 2)
  totalTickets     Int
  availableTickets Int
  status           String // DRAFT, PUBLISHED, CANCELLED, COMPLETED
  artists          Json // Array of {artistId, performanceTime, stageName}
  venue            Venue    @relation(fields: [venueId], references: [id])
  tickets          Ticket[]
  images           Image[]

  @@map("events")
}

model Image {
  id             Int      @id @default(autoincrement())
  url            String
  type           String // profile, cover, gallery, poster
  uploadedAt     DateTime @default(now())
  isActive       Boolean  @default(true)
  sequenceNumber Int      @default(0)

  // Foreign keys for different entities
  userId   Int?
  artistId Int?
  venueId  Int?
  eventId  Int?

  // Relations
  user   User?   @relation(fields: [userId], references: [id])
  artist Artist? @relation(fields: [artistId], references: [id])
  venue  Venue?  @relation(fields: [venueId], references: [id])
  event  Event?  @relation(fields: [eventId], references: [id])

  @@unique([type, sequenceNumber, userId])
  @@unique([type, sequenceNumber, artistId])
  @@unique([type, sequenceNumber, venueId])
  @@unique([type, sequenceNumber, eventId])
  @@map("images")
}

model Ticket {
  id           Int      @id @default(autoincrement())
  eventId      Int
  userId       Int
  ticketType   String
  price        Decimal  @db.Decimal(10, 2)
  purchaseDate DateTime @default(now())
  status       String // VALID, USED, CANCELLED, REFUNDED
  qrCode       String   @unique
  event        Event    @relation(fields: [eventId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@map("tickets")
}
